// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package data

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonB0fe1dfcDecodeGithubComWavesplatformGowavesCmdWmdInternalData(in *jlexer.Lexer, out *TradesInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TradesInfo, 0, 0)
			} else {
				*out = TradesInfo{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 TradeInfo
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB0fe1dfcEncodeGithubComWavesplatformGowavesCmdWmdInternalData(out *jwriter.Writer, in TradesInfo) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TradesInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB0fe1dfcEncodeGithubComWavesplatformGowavesCmdWmdInternalData(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradesInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB0fe1dfcEncodeGithubComWavesplatformGowavesCmdWmdInternalData(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradesInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB0fe1dfcDecodeGithubComWavesplatformGowavesCmdWmdInternalData(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradesInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB0fe1dfcDecodeGithubComWavesplatformGowavesCmdWmdInternalData(l, v)
}
func easyjsonB0fe1dfcDecodeGithubComWavesplatformGowavesCmdWmdInternalData1(in *jlexer.Lexer, out *TradeInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		case "id":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ID).UnmarshalJSON(data))
			}
		case "confirmed":
			out.Confirmed = bool(in.Bool())
		case "type":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.OrderType).UnmarshalJSON(data))
			}
		case "price":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Price).UnmarshalJSON(data))
			}
		case "amount":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Amount).UnmarshalJSON(data))
			}
		case "buyer":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Buyer).UnmarshalJSON(data))
			}
		case "seller":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Seller).UnmarshalJSON(data))
			}
		case "matcher":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Matcher).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonB0fe1dfcEncodeGithubComWavesplatformGowavesCmdWmdInternalData1(out *jwriter.Writer, in TradeInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Timestamp))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Raw((in.ID).MarshalJSON())
	}
	{
		const prefix string = ",\"confirmed\":"
		out.RawString(prefix)
		out.Bool(bool(in.Confirmed))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.Raw((in.OrderType).MarshalJSON())
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Raw((in.Price).MarshalJSON())
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		out.Raw((in.Amount).MarshalJSON())
	}
	{
		const prefix string = ",\"buyer\":"
		out.RawString(prefix)
		out.Raw((in.Buyer).MarshalJSON())
	}
	{
		const prefix string = ",\"seller\":"
		out.RawString(prefix)
		out.Raw((in.Seller).MarshalJSON())
	}
	{
		const prefix string = ",\"matcher\":"
		out.RawString(prefix)
		out.Raw((in.Matcher).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TradeInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonB0fe1dfcEncodeGithubComWavesplatformGowavesCmdWmdInternalData1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TradeInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonB0fe1dfcEncodeGithubComWavesplatformGowavesCmdWmdInternalData1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TradeInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonB0fe1dfcDecodeGithubComWavesplatformGowavesCmdWmdInternalData1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TradeInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonB0fe1dfcDecodeGithubComWavesplatformGowavesCmdWmdInternalData1(l, v)
}
