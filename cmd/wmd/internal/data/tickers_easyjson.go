// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package data

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6b6bdf5fDecodeGithubComWavesplatformGowavesCmdWmdInternalData(in *jlexer.Lexer, out *TickersInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TickersInfo, 0, 0)
			} else {
				*out = TickersInfo{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 TickerInfo
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b6bdf5fEncodeGithubComWavesplatformGowavesCmdWmdInternalData(out *jwriter.Writer, in TickersInfo) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TickersInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6b6bdf5fEncodeGithubComWavesplatformGowavesCmdWmdInternalData(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TickersInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b6bdf5fEncodeGithubComWavesplatformGowavesCmdWmdInternalData(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TickersInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6b6bdf5fDecodeGithubComWavesplatformGowavesCmdWmdInternalData(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TickersInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b6bdf5fDecodeGithubComWavesplatformGowavesCmdWmdInternalData(l, v)
}
func easyjson6b6bdf5fDecodeGithubComWavesplatformGowavesCmdWmdInternalData1(in *jlexer.Lexer, out *TickerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "amountAssetID":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.AmountAssetID[:], in.Bytes())
			}
		case "amountAssetName":
			out.AmountAssetName = string(in.String())
		case "amountAssetDecimals":
			out.AmountAssetDecimals = uint8(in.Uint8())
		case "amountAssetTotalSupply":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AmountAssetTotalSupply).UnmarshalJSON(data))
			}
		case "amountAssetMaxSupply":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AmountAssetMaxSupply).UnmarshalJSON(data))
			}
		case "amountAssetCirculatingSupply":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AmountAssetCirculatingSupply).UnmarshalJSON(data))
			}
		case "priceAssetID":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.PriceAssetID[:], in.Bytes())
			}
		case "priceAssetName":
			out.PriceAssetName = string(in.String())
		case "priceAssetDecimals":
			out.PriceAssetDecimals = uint8(in.Uint8())
		case "priceAssetTotalSupply":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PriceAssetTotalSupply).UnmarshalJSON(data))
			}
		case "priceAssetMaxSupply":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PriceAssetMaxSupply).UnmarshalJSON(data))
			}
		case "priceAssetCirculatingSupply":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.PriceAssetCirculatingSupply).UnmarshalJSON(data))
			}
		case "24h_open":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DayOpen).UnmarshalJSON(data))
			}
		case "24h_high":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DayHigh).UnmarshalJSON(data))
			}
		case "24h_low":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DayLow).UnmarshalJSON(data))
			}
		case "24h_close":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DayClose).UnmarshalJSON(data))
			}
		case "24h_vwap":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DayVWAP).UnmarshalJSON(data))
			}
		case "24h_volume":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DayVolume).UnmarshalJSON(data))
			}
		case "24h_priceVolume":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.DayPriceVolume).UnmarshalJSON(data))
			}
		case "timestamp":
			out.Timestamp = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6b6bdf5fEncodeGithubComWavesplatformGowavesCmdWmdInternalData1(out *jwriter.Writer, in TickerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"amountAssetID\":"
		out.RawString(prefix)
		out.Raw((in.AmountAssetID).MarshalJSON())
	}
	{
		const prefix string = ",\"amountAssetName\":"
		out.RawString(prefix)
		out.String(string(in.AmountAssetName))
	}
	{
		const prefix string = ",\"amountAssetDecimals\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.AmountAssetDecimals))
	}
	{
		const prefix string = ",\"amountAssetTotalSupply\":"
		out.RawString(prefix)
		out.Raw((in.AmountAssetTotalSupply).MarshalJSON())
	}
	{
		const prefix string = ",\"amountAssetMaxSupply\":"
		out.RawString(prefix)
		out.Raw((in.AmountAssetMaxSupply).MarshalJSON())
	}
	{
		const prefix string = ",\"amountAssetCirculatingSupply\":"
		out.RawString(prefix)
		out.Raw((in.AmountAssetCirculatingSupply).MarshalJSON())
	}
	{
		const prefix string = ",\"priceAssetID\":"
		out.RawString(prefix)
		out.Raw((in.PriceAssetID).MarshalJSON())
	}
	{
		const prefix string = ",\"priceAssetName\":"
		out.RawString(prefix)
		out.String(string(in.PriceAssetName))
	}
	{
		const prefix string = ",\"priceAssetDecimals\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.PriceAssetDecimals))
	}
	{
		const prefix string = ",\"priceAssetTotalSupply\":"
		out.RawString(prefix)
		out.Raw((in.PriceAssetTotalSupply).MarshalJSON())
	}
	{
		const prefix string = ",\"priceAssetMaxSupply\":"
		out.RawString(prefix)
		out.Raw((in.PriceAssetMaxSupply).MarshalJSON())
	}
	{
		const prefix string = ",\"priceAssetCirculatingSupply\":"
		out.RawString(prefix)
		out.Raw((in.PriceAssetCirculatingSupply).MarshalJSON())
	}
	{
		const prefix string = ",\"24h_open\":"
		out.RawString(prefix)
		out.Raw((in.DayOpen).MarshalJSON())
	}
	{
		const prefix string = ",\"24h_high\":"
		out.RawString(prefix)
		out.Raw((in.DayHigh).MarshalJSON())
	}
	{
		const prefix string = ",\"24h_low\":"
		out.RawString(prefix)
		out.Raw((in.DayLow).MarshalJSON())
	}
	{
		const prefix string = ",\"24h_close\":"
		out.RawString(prefix)
		out.Raw((in.DayClose).MarshalJSON())
	}
	{
		const prefix string = ",\"24h_vwap\":"
		out.RawString(prefix)
		out.Raw((in.DayVWAP).MarshalJSON())
	}
	{
		const prefix string = ",\"24h_volume\":"
		out.RawString(prefix)
		out.Raw((in.DayVolume).MarshalJSON())
	}
	{
		const prefix string = ",\"24h_priceVolume\":"
		out.RawString(prefix)
		out.Raw((in.DayPriceVolume).MarshalJSON())
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Timestamp))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TickerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6b6bdf5fEncodeGithubComWavesplatformGowavesCmdWmdInternalData1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TickerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6b6bdf5fEncodeGithubComWavesplatformGowavesCmdWmdInternalData1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TickerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6b6bdf5fDecodeGithubComWavesplatformGowavesCmdWmdInternalData1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TickerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6b6bdf5fDecodeGithubComWavesplatformGowavesCmdWmdInternalData1(l, v)
}
